
syntax = "proto3";

package faiss.ascend;

message CommonResponse {
    enum ErrorCode {
        OK = 0;
        ERROR = 1;
    }
    ErrorCode err = 1;
}

message CreateClientRequest {
    // nothing
}

message CreateClientResponse {
    CommonResponse result = 1;
    int32 clientId = 2;
}

message DestroyClientRequest {
    int32 clientId = 1;
}

message CreateIndexIVFPQRequest {
    int32 dim = 1;
    int32 nlist = 2;
    int32 subQuantizers = 3;
    int32 bitsPerCode = 4;
    int32 metric = 5;
    int32 nProbe = 6;
    int32 resource = 7;
}

message CreateIndexIVFFlatRequest {
    int32 dim = 1;
    int32 nlist = 2;
    int32 metric = 3;
    int32 nProbe = 4;
    int32 resource = 5;
}

message CreateIndexFlatRequest {
    int32 dim = 1;
    int32 metric = 2;
    int32 resource = 3;
}

message CreateIndexIVFSQRequest {
    int32 dim = 1;
    int32 nlist = 2;
    int32 qtype = 3;
    int32 metric = 4;
    int32 nProbe = 5;
    bool byResidual = 6;
    int32 resource = 7;
}

message CreateIndexSQRequest {
    int32 dim = 1;
    int32 qtype = 2;
    int32 metric = 3;
    int32 resource = 4;
}

message CreateIndexInt8FlatRequest {
    int32 dim = 1;
    int32 metric = 2;
    int32 resource = 3;
}

message CreateIndexInt8IVFFlatRequest {
    int32 dim = 1;
    int32 nlist = 2;
    int32 metric = 3;
    int32 nProbe = 4;
    int32 resource = 5;
}

message CreateIndexPreTransformRequest {
    int32 subindexId = 1;
}

message CreateLinearTransformRequest {
    int32 dimIn = 1;
    int32 dimOut = 2;
    bool haveBias = 3;
}

message CreateIndexResponse {
    CommonResponse result = 1;
    int32 indexId = 2;
}

message CreateTransformResponse {
    CommonResponse result = 1;
    int32 transformId = 2;
}

message DestroyIndexRequest {
    int32 indexId = 1;
}

message DestroyTransformRequest {
    int32 transformId = 1;
}

message IndexIVFUpdateCoarseCentRequest {
    int32 indexId = 1;
    int32 total = 2;
    int32 dim = 3;
    bytes data = 4;
}

message IndexIVFPQUpdatePQCentRequest {
    int32 indexId = 1;
    int32 M = 2;
    int32 ksub = 3;
    int32 dsub = 4;
    bytes data = 5;
}

message IndexIVFUpdateNprobeRequest {
    int32 indexId = 1;
    int32 nprobe = 2;
}

message IndexSQUpdateTrainedValueRequest {
    int32 indexId = 1;
    int32 dim = 2;
    bool isIvfSQ = 3;
    bytes vmin = 4;
    bytes vdiff = 5;
}

message LinearTransformUpdateTrainedValueRequest {
    int32 transformId = 1;
    int32 dimIn = 2;
    int32 dimOut = 3;
    bytes matrix = 4;
    bytes bias = 5;
}

message IndexPreTransformPrependRequest {
    int32 indexId = 1;
    int32 transformId = 2;
}

message IndexIVFPQAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 listId = 3;
    int32 codeSize = 4;
    bytes codes = 5;
    bytes ids = 6;
}

message IndexIVFSQAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 listId = 3;
    int32 codeSize = 4;
    bytes codes = 5;
    bytes ids = 6;
    bytes preCompute = 7;
}

message IndexIVFFlatAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 listId = 3;
    int32 dim = 4;
    bytes vectors = 5;
    bytes ids = 6;
}

message IndexFlatAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 dim = 3;
    bytes vectors = 4;
}

message IndexSQAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 dim = 3;
    bytes data = 4;
    bytes preCompute = 5;
}

message IndexInt8FlatAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 dim = 3;
    bytes data = 4;
    int32 metric = 5;
}

message IndexInt8IVFFlatAddRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 listId = 3;
    int32 dim = 4;
    bytes vectors = 5;
    bytes ids = 6;
    int32 metric = 7;
}

message IndexIVFGetListInfoRequest {
    int32 indexId = 1;
    int32 listId = 2;
}

message IndexIVFGetListLengthResponse {
    CommonResponse result = 1;
    uint32 len = 2;
}

message IndexFlatGetBaseRequest {
    int32 indexId = 1;
    int32 offset = 2;
    int32 num = 3;
    int32 metric = 4;
}

message IndexFlatGetBaseResponse {
    CommonResponse result = 1;
    bytes data = 2;
}

message IndexSQGetBaseRequest {
    int32 indexId = 1;
    int32 offset = 2;
    int32 num = 3;
}

message IndexSQGetBaseResponse {
    CommonResponse result = 1;
    bytes data = 2;
}

message IndexFlatGetBaseLengthRequest {
    int32 indexId = 1;
    int32 metric = 2;
}

message IndexFlatGetBaseLengthResponse {
    CommonResponse result = 1;
    uint32 len = 2;
}

message IndexSQGetBaseLengthRequest {
    int32 indexId = 1;
}

message IndexSQGetBaseLengthResponse {
    CommonResponse result = 1;
    uint32 len = 2;
}

message IndexIVFGetListCodesResponse {
    CommonResponse result = 1;
    bytes codes = 2;
    bytes ids = 3;
}

message IndexSearchRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 dim = 3;
    int32 k = 4;
    bytes query = 5;
}

message IndexSearchResponse {
    CommonResponse result = 1;
    bytes distance = 2;
    bytes label = 3;
}

message IndexInt8SearchRequest {
    int32 indexId = 1;
    int32 n = 2;
    int32 dim = 3;
    int32 k = 4;
    bytes query = 5;
}

message IndexInt8SearchResponse {
    CommonResponse result = 1;
    bytes distance = 2;
    bytes label = 3;
}

message IndexRemoveIdsRequest {
    int32 indexId = 1;
    int32 n = 2;
    bytes ids = 3;
}

message IndexRemoveRangeIdsRequest {
    int32 indexId = 1;
    uint32 min = 2;
    uint32 max = 3;
}

message IndexRemoveIdsResponse {
    CommonResponse result = 1;
    uint32 num = 2;
}

message IndexResetRequest {
    int32 indexId = 1;
    int32 metric = 2;
}

message IndexReserveMemRequest {
    int32 indexId = 1;
    uint32 n = 2;
}

message IndexReclaimMemRequest {
    int32 indexId = 1;
}

message IndexReclaimMemResponse {
    CommonResponse result = 1;
    uint32 size = 2;
}

message NNDimReductionCreateRequest {
    bytes modelPath = 1;
}

message NNDimReductionCreateResponse {
    CommonResponse result = 1;
}

message NNDimReductionInferRequest {
    uint32 n = 1;
    uint32 dimIn = 2;
    uint32 dimOut = 3;
    uint32 batchSize = 4;
    bytes data = 5;
}

message NNDimReductionInferResponse {
    CommonResponse result = 1;
    bytes data = 2;
}

message NNDimReductionDestroyRequest {

}

message NNDimReductionDestroyResponse {
    CommonResponse result = 1;
}

// for test
message TestDataIntegrityRequest {
    uint32 len = 1;
    bytes data = 2;
    uint32 checksum = 3;
}

message TestDataIntegrityResponse {
    CommonResponse result = 1;
    bytes data = 2;
}